name: Create new release
on: 
  workflow_dispatch:
    inputs:
      name:
        description: "Custom release name"
        default: ""
        required: false
        type: string
      version:
        description: "Custom tag name"
        default: ""
        required: false
        type: string
defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Windows release
    runs-on: windows-latest
    concurrency: staging_environment
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    
      - uses: actions/checkout@v3
      
      - name: Preparing
        run: |
          $TodayDate = Get-Date -Format 'yyyyMMdd'
          echo "TODAY_DATE=$TodayDate" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          if ( "${{ inputs.name }}" ) {
            echo "RELEASE_NAME=${{ inputs.name }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          }
          else {
            echo "RELEASE_NAME=Pricone UI EN DMM v$(Get-Date -Format 'yyyy.MM.dd')" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          }
          if ( "${{ inputs.version }}" ) {
            echo "RELEASE_TAG=${{ inputs.version }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          }
          else {
            echo "RELEASE_TAG=$TodayDate" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          }
          mkdir newrelease
      
      - name: Downloading core files
        run: |
          function Get-LatestRelease {
            param (
                [Parameter(Mandatory, Position=0)]
                [string]
                $Repo
                ,
                [Parameter(Mandatory,Position=1)]
                [string]
                $FileName
                ,
                [Parameter(Mandatory,Position=2)]
                [string]
                $OutFile
            )
              $AssetsURL = (Invoke-RestMethod -URI "$Env:GITHUB_API_URL/repos/$Repo/releases/latest").assets_url
              $GetSpecificFile = (Invoke-RestMethod -URI $AssetsURL) | Where-Object {$_.name -match $FileName}
              $R = Invoke-WebRequest -URI ($GetSpecificFile.browser_download_url) -OutFile "./newrelease/$OutFile"
              Expand-Archive -Path "newrelease/$OutFile" -DestinationPath "newrelease"
              Remove-Item -Path "newrelease/$OutFile"
          }
          Get-LatestRelease -Repo "BepInEx/BepInEx" -FileName "BepInEx_x86_.+\.zip" -OutFile "BepInEx.zip"
          Get-LatestRelease -Repo "bbepis/XUnity.AutoTranslator" -FileName "XUnity.AutoTranslator-BepInEx-\d.+\.zip" -OutFile "AutoTrans.zip"
      
      - name: Getting patch files
        run: |
          Copy-Item "Translation"  -Destination "newrelease/BepInEx" -Recurse
          Copy-Item "config" -Destination "newrelease/BepInEx"  -Recurse
      
      - name: Generating version files
        run: |
          "${{ env.TODAY_DATE }}" | Out-File -FilePath "newrelease/Version.txt" -Encoding utf8
      
      - name: Generating changelog
        id: changelog
        uses: loopwerk/tag-changelog@v1
        with:
          exclude_types: repo
          token: ${{ secrets.GITHUB_TOKEN }}
          config_file: .github\changelog-config.js
      
      - name: Generating artifact
        run: |
          Compress-Archive -Path "newrelease/*" -CompressionLevel Fastest -DestinationPath 'PriconneTL_${{ env.TODAY_DATE }}.zip'
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: 'PriconneTL_${{ env.TODAY_DATE }}.zip'
      
      - name: Publish Release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.RELEASE_NAME }}
          body: ${{ steps.changelog.outputs.changes }}
          tag: ${{ env.RELEASE_TAG }}
          artifacts:
            "./PriconneTL_${{ env.TODAY_DATE }}.zip"
          
  announce:
    name: Discord Announcement
    runs-on: ubuntu-latest
    concurrency: staging_environment
    needs: build
    steps:
      - name: Announcing new release
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@0c4b27844ba47cb1c7bee539c8eead5284ce9fa9
        with:
          args: "${{ needs.build.outputs.changelog }}"
